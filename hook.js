http = require('http');
fs = require('fs');
proc = require('child_process');

var port = 8080;
var host = "10.1.0.4";
var repo = "/home/jumble/rabibbi-game";
var game = "/game";
var maps = "/maps";
var tools = "/tools";
var build = "/build";
var sdk = "/opt/gendev";

function onProcessCommit(data) {
	var msg = data.head_commit.message;
	var now = new Date();
	var log = "# Build log (" + now.toDateString() + ")\n\n";
	var out = null;

	log += "* Generated by: " + data.head_commit.author.name + " (" + data.head_commit.author.email + ")\n\n";

	// Generate build if not a CI push
	if (msg.indexOf("*** CI ***") < 0) {
		// Update the local repo
		out = proc.spawnSync("git", ["pull"], {
			cwd: repo,
			env: {"GENDEV": sdk}
		});

		log += "## Git Update:\n\n";
		log += "* STDOUT:\n";
		log += out.stdout + "\n";
		log += "* STDERR:\n";
		log += out.stderr + "\n";

		// Clean
		out = proc.spawnSync("make", ["clean"], {
			cwd: repo + game,
			env: {"GENDEV": sdk}
		});

		log += "## Repo clean:\n\n";
                log += "* STDOUT:\n";
                log += out.stdout + "\n";
                log += "* STDERR:\n";
                log += out.stderr + "\n";

		// Build the maps using tiled2c
		log += "## Map files built from JSON to C:\n\n";
		var mapFiles = fs.readdirSync(repo + maps);
		
		for (var i = 0; i < mapFiles.length; ++i) {
			if (mapFiles[i].indexOf(".json") > 0) {
				log += "**" + mapFiles[i] + "**\n\n";
				var rawName = mapFiles[i].substring(0, mapFiles[i].indexOf('.'));
				out = proc.spawnSync("node", [repo + tools + "/tiled2c.js", repo + maps + "/" + mapFiles[i], repo + game + rawName]);
				
				log += "* STDOUT:\n";
                		log += out.stdout + "\n";
                		log += "* STDERR:\n";
		                log += out.stderr + "\n";
			}
		}

		// Build the game using the SDK
		out = proc.spawnSync("make", [], {
                        cwd: repo + game,
                        env: {"GENDEV": sdk}
                });

                log += "## Game and rescomp build:\n\n";
                log += "* STDOUT:\n";
                log += out.stdout + "\n";
                log += "* STDERR:\n";
                log += out.stderr + "\n";

		// Create directory for the new build
		var buildPath = "/" + now.getDay() + "_" + now.getMonth() + "_" + now.getFullYear() + "__" + now.getHours() +
			"_" + now.getMinutes() + "_" + now.getSeconds();

		fs.mkdirSync(repo + build + buildPath);

		// Save the build log and copy the ROM file
		fs.writeFileSync(repo + build + buildPath + "/README.md", log);
		proc.spawnSync("cp", [repo + game + "/out/rom.bin", repo + build + buildPath + "/rom.bin"]);

		// Delete the original build folder
		proc.spawnSync("rm", ["-rf", repo + game + "/out"]);

		// Commit changes to the repo
		out = proc.spawnSync("git", ["add", "."], {
			cwd: repo
		});

		out = proc.spawnSync("git", ["commit", "-m", "*** CI *** Automated ROM build"], {
			cwd: repo
		});

		out = proc.spawnSync("git", ["push", "origin", "master"], {
			cwd: repo
		});
	}
}


server = http.createServer( function(req, res) {
    if (req.method == 'POST') {
        var body = '';
        req.on('data', function (data) {
            body += data;
        });

        req.on('end', function () {
		onProcessCommit(JSON.parse(body));
        });

        res.writeHead(200, {'Content-Type': 'text/html'});
        res.end('post received');
    }
    else
    {
        res.writeHead(200, {'Content-Type': 'text/html'});
        res.end("how about NO");
    }

});

server.listen(port, host);
console.log('Listening at ' + port);
